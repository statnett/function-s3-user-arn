name: CI

on:
  push:
    tags:
      - v*
  pull_request: {}
  workflow_dispatch:
    inputs:
      version:
        description: Package version (e.g. v0.1.0)
        required: false

env:
  # Common versions
  GO_VERSION: '1.24.3'
  DOCKER_BUILDX_VERSION: 'v0.23.0'

jobs:
  lint:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false  # The golangci-lint action does its own caching.

      - name: Check go mod tidy
        run: go mod tidy && git diff --exit-code go.mod go.sum

      - name: Lint
        uses: golangci/golangci-lint-action@v8
        with:
          # renovate: datasource=go depName=github.com/golangci/golangci-lint
          version: 'v2.1.6'

  unit-test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Unit Tests
        run: go test -v -cover ./...

  # We want to build most packages for the amd64 and arm64 architectures. To
  # speed this up we build single-platform packages in parallel. We then upload
  # those packages to GitHub as a build artifact. The push job downloads those
  # artifacts and pushes them as a single multi-platform package.
  build:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: true
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v4

      # We ask Docker to use GitHub Action's native caching support to speed up
      # the build, per https://docs.docker.com/build/cache/backends/gha/.
      - name: Build Runtime
        id: image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: image
          build-args:
            GO_VERSION=${{ env.GO_VERSION }}
          outputs: type=docker,dest=runtime-${{ matrix.arch }}.tar

      - name: Setup the Crossplane CLI
        run: "curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh"

      - name: Build Package
        run: ./crossplane xpkg build --package-file=${{ matrix.arch }}.xpkg --package-root=package/ --embed-runtime-image-tarball=runtime-${{ matrix.arch }}.tar

      # TODO there should be some variable to access this without scripting, no?
      - name: Get Latest Tag
        id: get_latest_tag
        run: echo "LATEST_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Upload Package
        run: ./crossplane xpkg push -f ${{ matrix.arch }}.xpkg  ghcr.io/statnett/function-s3-user-arn::${{ env.LATEST_TAG }}
